# KuCoin API Integration Playbook
## Complete Guide for Pain-Free Implementation with Supabase, Vercel & KuCoin

*This playbook contains all critical knowledge gained from successful implementation*

---

## üéØ **PROVEN WORKING SETUP**

### **Architecture That Works:**
```
Frontend (Vercel) ‚Üí Supabase Edge Function ‚Üí KuCoin API ‚Üí Real Orders
```

### **Key Success Factors:**
1. **Use existing working credential system** (don't reinvent)
2. **Copy exact authentication code** from working functions
3. **Match KuCoin's exact requirements** for order formats
4. **Test with separate function first** (don't break existing code)

---

## üîë **CRITICAL ENVIRONMENT VARIABLES**

### **Supabase Edge Function Environment Variables:**
```javascript
// These EXACT variable names work:
const kucoinApiKey = Deno.env.get('KUCOIN_API_KEY');
const kucoinApiSecret = Deno.env.get('KUCOIN_API_SECRET');
const kucoinPassphrase = Deno.env.get('KUCOIN_API_PASSPHRASE');
```

### **Where to Set Them:**
- **Supabase Dashboard** ‚Üí Project Settings ‚Üí Edge Functions ‚Üí Environment Variables
- **NOT in Vercel** (different environment)
- **NOT in frontend code** (security risk)

---

## üìã **EXACT WORKING CODE PATTERNS**

### **1. Credential Loading (COPY THIS EXACTLY):**
```javascript
// Get KuCoin credentials EXACTLY like working price/balance function
const kucoinApiKey = Deno.env.get('KUCOIN_API_KEY');
const kucoinApiSecret = Deno.env.get('KUCOIN_API_SECRET');
const kucoinPassphrase = Deno.env.get('KUCOIN_API_PASSPHRASE');

console.log('Debug - API Key exists:', !!kucoinApiKey);
console.log('Debug - API Secret exists:', !!kucoinApiSecret);
console.log('Debug - Passphrase exists:', !!kucoinPassphrase);

if (!kucoinApiKey || !kucoinApiSecret || !kucoinPassphrase) {
  throw new Error(`KuCoin API credentials not configured - Key: ${!!kucoinApiKey}, Secret: ${!!kucoinApiSecret}, Passphrase: ${!!kucoinPassphrase}`);
}
```

### **2. Order Data Format (CRITICAL - Must Match KuCoin Requirements):**
```javascript
// ‚úÖ WORKING FORMAT:
const orderData = {
  symbol: 'AMPL-USDT',
  side: 'buy',
  type: 'limit',
  price: '0.99',        // String format
  size: '10',           // Whole number - NO DECIMALS like 10.1010
  clientOid: `test-${Date.now()}`
};

// ‚ùå BROKEN FORMATS:
// size: '10.1010'  // Causes "Order size increment invalid"
// price: 0.99      // Number instead of string
```

### **3. Authentication Functions (COPY EXACTLY FROM WORKING CODE):**
```javascript
// These functions MUST be copied exactly from working price/balance function:
async function placeKuCoinOrder(orderData, apiKey, apiSecret, passphrase) { ... }
async function generateKuCoinSignature(timestamp, method, endpoint, body, secret) { ... }
async function generateKuCoinPassphrase(passphrase, secret) { ... }
```

### **4. CORS Headers (EXACT FORMAT):**
```javascript
// Handle CORS preflight requests
if (req.method === 'OPTIONS') {
  return new Response(null, {
    status: 204,  // MUST be 204, not 200
    headers: {
      'Access-Control-Allow-Origin': 'https://amplalgo-app.vercel.app',  // Exact domain
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    }
  });
}
```

---

## üö® **COMMON PITFALLS & SOLUTIONS**

### **Problem 1: "Missing KuCoin credentials in environment variables"**
**Solution:** Environment variables are set in Supabase, not Vercel
- Go to Supabase Dashboard ‚Üí Project Settings ‚Üí Edge Functions ‚Üí Environment Variables
- Add all three: KUCOIN_API_KEY, KUCOIN_API_SECRET, KUCOIN_API_PASSPHRASE

### **Problem 2: "Order size increment invalid"**
**Solution:** Use whole numbers for AMPL order sizes
- ‚úÖ Use: `"10"`, `"5"`, `"20"`
- ‚ùå Don't use: `"10.1010"`, `"5.5"`

### **Problem 3: CORS errors**
**Solution:** 
- Use exact domain in CORS headers (not wildcards)
- Handle OPTIONS requests with status 204
- Include all required headers

### **Problem 4: "Function not found" or 404 errors**
**Solution:** Check URL paths match function names
- If function file is `index.ts` ‚Üí URL is `/functions/v1/[function-name]`
- Function name in Supabase dashboard must match URL path

### **Problem 5: Authentication failures**
**Solution:** Copy authentication code EXACTLY from working price/balance function
- Don't try to rewrite the crypto signatures
- Use same variable names and structure

---

## üìÅ **FILE STRUCTURE THAT WORKS**

### **Supabase Edge Function Structure:**
```
/functions/
  ‚îî‚îÄ‚îÄ your-function-name/
      ‚îî‚îÄ‚îÄ index.ts  (MUST be named index.ts)
```

### **Frontend Test File:**
```javascript
// Call the function with correct URL:
const response = await fetch(`${SUPABASE_URL}/functions/v1/your-function-name`, {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
    'Content-Type': 'application/json'
  }
});
```

---

## üîÑ **STEP-BY-STEP IMPLEMENTATION PROCESS**

### **Phase 1: Setup (Do This First)**
1. ‚úÖ Verify existing price/balance functions work
2. ‚úÖ Identify exact credential variable names from working code
3. ‚úÖ Set environment variables in Supabase (not Vercel)
4. ‚úÖ Test credential access with simple console.log

### **Phase 2: Create Test Function (Safe Approach)**
1. ‚úÖ Create separate test function (don't modify existing code)
2. ‚úÖ Copy authentication code EXACTLY from working function
3. ‚úÖ Use simple order data (whole numbers only)
4. ‚úÖ Test with green button approach

### **Phase 3: Verify Success**
1. ‚úÖ Check Supabase function logs for credential confirmation
2. ‚úÖ Verify order appears in KuCoin account
3. ‚úÖ Confirm order ID is returned in response

### **Phase 4: Scale Up (Only After Success)**
1. ‚úÖ Integrate working order placement into main system
2. ‚úÖ Add multiple order levels
3. ‚úÖ Implement error handling and retries

---

## üéØ **EXACT WORKING CONFIGURATION**

### **Supabase Function URL Pattern:**
```
https://fbkcdirkshubectuvxzi.supabase.co/functions/v1/[function-name]
```

### **KuCoin API Endpoints:**
```
Production: https://api.kucoin.com
Sandbox: https://openapi-sandbox.kucoin.com
```

### **Required Headers for KuCoin:**
```javascript
headers: {
  'KC-API-KEY': apiKey,
  'KC-API-SIGN': signature,
  'KC-API-TIMESTAMP': timestamp,
  'KC-API-PASSPHRASE': passphraseSignature,
  'KC-API-KEY-VERSION': '2',
  'Content-Type': 'application/json'
}
```

---

## üß™ **TESTING STRATEGY**

### **Always Test In This Order:**
1. **Credentials** - Verify environment variables load
2. **Authentication** - Test signature generation
3. **Single Order** - Place one test order
4. **Multiple Orders** - Scale up gradually
5. **Error Handling** - Test failure scenarios

### **Test Order Specifications:**
```javascript
// Safe test order that won't trigger accidentally:
{
  symbol: 'AMPL-USDT',
  side: 'buy',
  type: 'limit',
  price: '0.99',  // Below current market price
  size: '10',     // Small amount
  clientOid: `test-${Date.now()}`
}
```

---

## üìö **REFERENCE LINKS**

- **KuCoin API Docs:** https://docs.kucoin.com/
- **Supabase Edge Functions:** https://supabase.com/docs/guides/functions
- **CORS Troubleshooting:** Focus on exact domain matching and OPTIONS handling

---

## üéØ **SUCCESS INDICATORS**

### **You Know It's Working When:**
1. ‚úÖ Console shows: "Debug - API Key exists: true" (all three credentials)
2. ‚úÖ No CORS errors in browser console
3. ‚úÖ Order ID returned in response: `68687735feef1800079b3d3`
4. ‚úÖ Order visible in KuCoin account under "Open Orders"
5. ‚úÖ Success alert: "Test order placed successfully!"

---

## üí° **KEY INSIGHTS**

1. **Don't reinvent authentication** - Copy from working code
2. **KuCoin is picky about order formats** - Use exact specifications
3. **Test separately first** - Don't break existing systems
4. **Environment variables location matters** - Supabase vs Vercel
5. **CORS needs exact domain** - No wildcards for production

---

*This playbook represents hours of debugging condensed into actionable knowledge. Follow it exactly for pain-free implementation.*











# AMPL SYSTEM REFERENCE
*Complete reference for AMPL Activity Feed and Smart Order Ladder integration*

## üèóÔ∏è HTML STRUCTURE

### Smart Order Ladder Panel
```html
<!-- Smart Order Ladder Section -->
<div class="ladder-section order-ladder-section">
    <div class="section-header">
        <h3><i class="fas fa-layer-group"></i> Smart Order Ladder</h3>
    </div>
    <div class="section-content">
        <!-- 8 Price Level Badges -->
        <div class="order-ladder-grid">
            <div class="price-level-badge empty">1.1600</div>
            <div class="price-level-badge empty">1.1212</div>
            <div class="price-level-badge empty">1.0838</div>
            <div class="price-level-badge empty">1.0126</div>
            <div class="price-level-badge empty">0.9788</div>
            <div class="price-level-badge empty">0.9461</div>
            <div class="price-level-badge empty">0.9145</div>
            <div class="price-level-badge empty">0.8545</div>
        </div>
        
        <!-- Order Status Display -->
        <div class="order-status-display">
            <strong>0 orders open, 0 pending</strong>
        </div>
    </div>
</div>
```

### Key Selectors
- **Smart Order Ladder Container:** `.ladder-section.order-ladder-section`
- **Content Area:** `.ladder-section.order-ladder-section .section-content`
- **Price Badges:** `.order-ladder-grid .price-level-badge`
- **Header:** `.ladder-section.order-ladder-section .section-header h3`

## üé® CSS CLASSES

### Price Level Badge States
```css
/* Default state - Gray */
.price-level-badge.empty {
    border-color: #666666;
    background: rgba(102, 102, 102, 0.1);
    color: #666666;
}

/* Active orders - Orange with pulse animation */
.price-level-badge.pending {
    border-color: #ff9500;
    background: rgba(255, 149, 0, 0.1);
    color: #ff9500;
    box-shadow: 0 0 8px rgba(255, 149, 0, 0.3);
    animation: pendingPulse 2s ease-in-out infinite;
}

/* Executed orders - Green */
.price-level-badge.filled {
    border-color: #00ff41;
    background: rgba(0, 255, 65, 0.1);
    color: #00ff41;
    box-shadow: 0 0 8px rgba(0, 255, 65, 0.3);
}

/* Base badge styling */
.price-level-badge {
    background: rgba(0, 0, 0, 0.4);
    border: 2px solid;
    border-radius: 6px;
    padding: 8px 12px;
    text-align: center;
    font-family: 'Courier New', monospace;
    font-weight: bold;
    font-size: 12px;
    transition: all 0.3s ease;
    cursor: pointer;
}
```

### Color Variables
```css
:root {
    --panel-bw: #000000;
    --text-primary: #ffffff;
    --text-secondary: #b0b0b0;
    --text-muted: #808080;
    --accent-primary: #2196F3;
    --accent-success: #4CAF50;
    --accent-warning: #FFC107;
    --accent-danger: #F44336;
    --border-radius: 12px;
}
```

## üîß AMPL MANAGER METHODS

### Key Methods from AMPLManagerEnhanced
```javascript
class AMPLManagerEnhanced {
    // Get active orders via Supabase function
    async getActiveOrders() {
        // Returns: {active: [], filled: []}
        // active: Array of pending limit orders
        // filled: Array of executed orders
    }
    
    // Get current AMPL price
    async getCurrentAMPLPrice() {
        // Returns: number (current price)
    }
    
    // Get KuCoin balance for specific symbol
    async getKuCoinBalance(symbol) {
        // Returns: number (balance amount)
    }
    
    // Price levels configuration
    priceLevels = [
        1.160, 1.114, 1.069, 1.026, 
        0.985, 0.946, 0.908, 0.872
    ];
    
    // Global access
    window.amplManagerEnhanced = this;
}
```

### Order Data Structure
```javascript
// getActiveOrders() returns:
{
    active: [
        {price: "1.1600", amount: "100", ...},
        {price: "1.0838", amount: "120", ...}
    ],
    filled: [
        {price: "1.1212", amount: "110", ...}
    ]
}
```

## üéØ WORKING ORDER DETECTION LOGIC

### Exact Targeting (No Detection Needed)
```javascript
// Find Smart Order Ladder - EXACT selector
const smartOrderLadder = document.querySelector('.ladder-section.order-ladder-section');
const targetPanel = smartOrderLadder.querySelector('.section-content');

// Find price badges - EXACT selector  
const priceBadges = document.querySelectorAll('.order-ladder-grid .price-level-badge');

// Get order data - EXACT method
const orderData = await amplManagerEnhanced.getActiveOrders();
```

### Badge Highlighting Logic
```javascript
// Reset all badges to empty state
priceBadges.forEach(badge => {
    badge.className = 'price-level-badge empty';
});

// Highlight active orders as PENDING (orange)
activeOrders.forEach((order, index) => {
    if (index < priceBadges.length) {
        priceBadges[index].className = 'price-level-badge pending';
    }
});

// Highlight filled orders as FILLED (green) 
filledOrders.forEach((order, index) => {
    if (index < priceBadges.length) {
        priceBadges[index].className = 'price-level-badge filled';
    }
});
```

## üîÑ ACTIVITY FEED INTEGRATION

### Content Replacement Strategy
```javascript
// Store original content
this.originalContent = this.targetPanel.innerHTML;

// Replace with activity feed
this.targetPanel.innerHTML = feedHTML;

// Restore original with enhancements
const enhancedContent = this.addToggleButtonToOriginal(this.originalContent);
this.targetPanel.innerHTML = enhancedContent;
```

### Toggle Button Integration
```javascript
// Add toggle button to restored Smart Order Ladder
addToggleButtonToOriginal(originalContent) {
    const toggleButton = `
        <button class="toggle-activity-feed-btn" id="toggle-activity-feed" title="Show Live Activity Feed">
            <i class="fas fa-chart-line"></i>
        </button>
    `;
    
    return `
        <div class="smart-order-ladder-enhanced">
            ${toggleButton}
            ${originalContent}
        </div>
    `;
}
```

### Level Numbering System
```javascript
// Replace static prices with level numbers
setPriceLevelNumbers() {
    const priceBadges = document.querySelectorAll('.order-ladder-grid .price-level-badge');
    
    priceBadges.forEach((badge, index) => {
        const levelNumber = index + 1;
        const levelText = `Limit Order ${levelNumber}`;
        
        // Store original price for reference
        badge.setAttribute('data-original-price', badge.textContent.trim());
        badge.setAttribute('data-level', levelNumber);
        badge.textContent = levelText;
    });
}
```

## üìä MONITORING SYSTEM

### Order Monitoring Loop
```javascript
// Check orders every 5 seconds when Smart Order Ladder is visible
setInterval(() => {
    if (!this.isShowingActivityFeed) {
        this.checkOrdersAndHighlight();
    }
}, 5000);

async checkOrdersAndHighlight() {
    const orderData = await amplManagerEnhanced.getActiveOrders();
    if (orderData && (orderData.active || orderData.filled)) {
        const activeOrders = orderData.active || [];
        const filledOrders = orderData.filled || [];
        this.updatePriceLevelBadges(activeOrders, filledOrders);
    }
}
```

### Global Functions for External Use
```javascript
// Available globally for testing and external integration
function updateOrderIndicators(activeOrders, executedOrders) {
    if (amplActivityFeed) amplActivityFeed.updateOrderIndicators(activeOrders, executedOrders);
}

function logProfit(message) {
    if (amplActivityFeed) amplActivityFeed.logProfit(message);
}

function logSell(message) {
    if (amplActivityFeed) amplActivityFeed.logSell(message);
}

function logSystem(message) {
    if (amplActivityFeed) amplActivityFeed.logSystem(message);
}
```

## üß™ TESTING COMMANDS

### Manual Order Testing
```javascript
// Test with active orders (should show orange badges)
updateOrderIndicators([
    {level: 1, price: "1.1600"}, 
    {level: 3, price: "1.0838"}, 
    {level: 5, price: "0.9788"}
]);

// Test with mixed orders (active + executed)
updateOrderIndicators(
    [{level: 1, price: "1.1600"}, {level: 2, price: "1.1212"}], // Active (orange)
    [{level: 3, price: "1.0838"}, {level: 4, price: "1.0126"}]  // Executed (green)
);

// Test activity feed messages
logProfit("Level 3: $1.069 ‚Üí $1.105 (3.4% profit)");
logSell("Selling Level 3: 45.2 AMPL");
logSystem("All cascade levels monitoring active");
```

### Console Debugging
```javascript
// Check if AMPL Manager is available
console.log('amplManagerEnhanced:', typeof amplManagerEnhanced);

// Check order data
amplManagerEnhanced.getActiveOrders().then(data => console.log('Orders:', data));

// Check price badges
console.log('Price badges:', document.querySelectorAll('.order-ladder-grid .price-level-badge').length);
```

## üé® STYLING REFERENCE

### Activity Feed Styling
```css
.ampl-activity-feed-container {
    height: 100%;
    display: flex;
    flex-direction: column;
    background: var(--panel-bw, #000000);
    color: var(--text-primary, #ffffff);
    border-radius: var(--border-radius, 12px);
    overflow: hidden;
}

.activity-message {
    display: flex;
    align-items: flex-start;
    gap: 8px;
    padding: 6px 8px;
    border-radius: 6px;
    font-size: 13px;
    line-height: 1.4;
    border-left: 3px solid transparent;
    background: rgba(255, 255, 255, 0.02);
    animation: slideIn 0.3s ease;
}

.activity-message.profit {
    border-left-color: var(--accent-success, #4CAF50);
    background: rgba(76, 175, 80, 0.05);
}

.activity-message.sell {
    border-left-color: var(--accent-primary, #2196F3);
    background: rgba(33, 150, 243, 0.05);
}
```

### Toggle Button Styling
```css
.toggle-activity-feed-btn {
    position: absolute;
    top: 8px;
    right: 8px;
    background: rgba(33, 150, 243, 0.2);
    border: 2px solid rgba(33, 150, 243, 0.4);
    color: #2196F3;
    padding: 6px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 12px;
    transition: all 0.3s ease;
    z-index: 10;
    width: 28px;
    height: 28px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 0 8px rgba(33, 150, 243, 0.3);
}
```

## üîç KNOWN ISSUES & SOLUTIONS

### Issue: Order Detection Not Working
**Solution:** Use exact selectors and methods:
- Selector: `.order-ladder-grid .price-level-badge`
- Method: `amplManagerEnhanced.getActiveOrders()`
- Classes: `.pending` (orange), `.filled` (green), `.empty` (gray)

### Issue: Rebase Monitor Corruption
**Solution:** Target only Smart Order Ladder container:
```javascript
// CORRECT - Only targets Smart Order Ladder
const smartOrderLadder = document.querySelector('.ladder-section.order-ladder-section');

// WRONG - Could target other panels
const allBadges = document.querySelectorAll('.price-level-badge');
```

### Issue: Toggle Button Positioning
**Solution:** Use absolute positioning within enhanced container:
```javascript
const enhancedContent = `
    <div class="smart-order-ladder-enhanced">
        ${toggleButton}
        ${originalContent}
    </div>
`;
```

## üìã CURRENT STATUS

### ‚úÖ WORKING FEATURES
- ‚úÖ KuCoin order detection and highlighting
- ‚úÖ Smart Order Ladder ‚Üî Live Activity Feed switching
- ‚úÖ Level numbering ("Limit Order 1", "Limit Order 2", etc.)
- ‚úÖ Orange badges for active orders (.pending)
- ‚úÖ Green badges for executed orders (.filled)
- ‚úÖ Activity feed message capture and display
- ‚úÖ Toggle button positioning and styling
- ‚úÖ Rebase Monitor protection (no cross-contamination)

### ‚è±Ô∏è KNOWN ISSUES
- ‚è±Ô∏è 1-2 minute delay when switching from Smart Order Ladder to Live Activity Feed
  - Needs investigation and fix
  - May be related to DOM settling, event listeners, or content replacement timing

### üéØ INTEGRATION POINTS
- **Global Object:** `window.amplManagerEnhanced`
- **Activity Feed Instance:** `window.amplActivityFeed`
- **Order Update Method:** `updateOrderIndicators(active, executed)`
- **Logging Methods:** `logProfit()`, `logSell()`, `logSystem()`

---

*This reference file contains all the exact selectors, methods, and structures needed for AMPL Activity Feed integration. Use this for future task inheritance to avoid detection guesswork.*

